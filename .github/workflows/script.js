// 3D Futuristic Portfolio - Advanced JavaScript Interactions
document.addEventListener('DOMContentLoaded', () => {
    
    // Create 3D Floating Particles System
    function createFloatingParticles() {
        const particleContainer = document.createElement('div');
        particleContainer.className = 'floating-particles';
        particleContainer.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -5;
        `;
        document.body.appendChild(particleContainer);
        
        // Create 60 particles for rich effect
        for (let i = 0; i < 60; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            // Random positioning and timing
            particle.style.left = Math.random() * 100 + 'vw';
            particle.style.animationDelay = Math.random() * 20 + 's';
            particle.style.animationDuration = (Math.random() * 15 + 15) + 's';
            
            // Random particle sizes and colors
            const size = Math.random() * 6 + 2;
            particle.style.width = size + 'px';
            particle.style.height = size + 'px';
            
            // Color variations in blue/cyan spectrum
            const hue = Math.random() * 60 + 180;
            const saturation = Math.random() * 30 + 70;
            const lightness = Math.random() * 40 + 50;
            
            particle.style.background = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n            particle.style.borderRadius = '50%';\n            particle.style.position = 'absolute';\n            particle.style.boxShadow = `\n                0 0 ${size * 3}px hsl(${hue}, ${saturation}%, ${lightness}%),\n                0 0 ${size * 6}px hsl(${hue}, ${saturation}%, ${lightness - 20}%)\n            `;\n            \n            // Floating animation\n            particle.style.animation = `particle-float ${15 + Math.random() * 10}s linear infinite`;\n            \n            particleContainer.appendChild(particle);\n        }\n    }\n    \n    // Add particle animation keyframes\n    const particleStyle = document.createElement('style');\n    particleStyle.textContent = `\n        @keyframes particle-float {\n            0% {\n                transform: translateY(100vh) translateX(0) rotateZ(0deg) scale(0);\n                opacity: 0;\n            }\n            10% {\n                opacity: 1;\n                transform: translateY(90vh) translateX(10px) rotateZ(36deg) scale(1);\n            }\n            90% {\n                opacity: 1;\n                transform: translateY(10vh) translateX(100px) rotateZ(324deg) scale(1);\n            }\n            100% {\n                transform: translateY(-10vh) translateX(120px) rotateZ(360deg) scale(0);\n                opacity: 0;\n            }\n        }\n    `;\n    document.head.appendChild(particleStyle);\n    \n    // 3D Mouse Tracking for Hero Section\n    const hero = document.querySelector('.hero');\n    if (hero) {\n        let mouseX = 0, mouseY = 0;\n        let targetX = 0, targetY = 0;\n        \n        hero.addEventListener('mousemove', (e) => {\n            const { clientX, clientY } = e;\n            const { innerWidth, innerHeight } = window;\n            \n            targetX = (clientX / innerWidth) * 100;\n            targetY = (clientY / innerHeight) * 100;\n            \n            // Smooth animation\n            const animate = () => {\n                mouseX += (targetX - mouseX) * 0.1;\n                mouseY += (targetY - mouseY) * 0.1;\n                \n                // 3D parallax effect\n                const moveX = (mouseX - 50) * 0.02;\n                const moveY = (mouseY - 50) * 0.02;\n                \n                hero.style.transform = `\n                    perspective(1000px) \n                    rotateX(${moveY}deg) \n                    rotateY(${moveX}deg)\n                `;\n                \n                // Dynamic background gradient\n                hero.style.background = `\n                    radial-gradient(circle at ${mouseX}% ${mouseY}%, \n                    rgba(0, 180, 219, 0.4) 0%, \n                    rgba(30, 60, 114, 0.3) 30%, \n                    transparent 70%),\n                    linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #0e4b99 100%)\n                `;\n                \n                requestAnimationFrame(animate);\n            };\n            animate();\n        });\n        \n        hero.addEventListener('mouseleave', () => {\n            hero.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg)';\n            hero.style.background = `\n                radial-gradient(ellipse at center, rgba(0, 180, 219, 0.3) 0%, transparent 50%),\n                linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #0e4b99 100%)\n            `;\n        });\n    }\n    \n    // Advanced 3D Card Tilt Effect\n    function add3DTiltEffect(selector) {\n        const cards = document.querySelectorAll(selector);\n        \n        cards.forEach(card => {\n            let isHovering = false;\n            \n            card.addEventListener('mouseenter', () => {\n                isHovering = true;\n            });\n            \n            card.addEventListener('mouseleave', () => {\n                isHovering = false;\n                card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) translateZ(0px)';\n            });\n            \n            card.addEventListener('mousemove', (e) => {\n                if (!isHovering) return;\n                \n                const rect = card.getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n                \n                const centerX = rect.width / 2;\n                const centerY = rect.height / 2;\n                \n                const rotateX = (y - centerY) / 8;\n                const rotateY = (centerX - x) / 8;\n                \n                card.style.transform = `\n                    perspective(1000px) \n                    rotateX(${rotateX}deg) \n                    rotateY(${rotateY}deg) \n                    translateZ(20px)\n                    scale(1.02)\n                `;\n            });\n        });\n    }\n    \n    // Quantum Ripple Effect\n    function addQuantumRipple(selector) {\n        const elements = document.querySelectorAll(selector);\n        \n        elements.forEach(element => {\n            element.addEventListener('click', function(e) {\n                const ripple = document.createElement('div');\n                const rect = this.getBoundingClientRect();\n                const size = Math.max(rect.width, rect.height) * 1.5;\n                const x = e.clientX - rect.left - size / 2;\n                const y = e.clientY - rect.top - size / 2;\n                \n                ripple.style.cssText = `\n                    position: absolute;\n                    width: ${size}px;\n                    height: ${size}px;\n                    left: ${x}px;\n                    top: ${y}px;\n                    background: radial-gradient(circle, \n                        rgba(0, 180, 219, 0.8) 0%, \n                        rgba(0, 180, 219, 0.4) 30%,\n                        rgba(255, 255, 255, 0.2) 50%,\n                        transparent 70%);\n                    border-radius: 50%;\n                    transform: scale(0);\n                    animation: quantum-ripple 1s ease-out;\n                    pointer-events: none;\n                    z-index: 10;\n                `;\n                \n                this.style.position = 'relative';\n                this.appendChild(ripple);\n                \n                setTimeout(() => {\n                    ripple.remove();\n                }, 1000);\n            });\n        });\n    }\n    \n    // Add quantum ripple keyframes\n    const rippleStyle = document.createElement('style');\n    rippleStyle.textContent = `\n        @keyframes quantum-ripple {\n            0% {\n                transform: scale(0) rotate(0deg);\n                opacity: 1;\n            }\n            50% {\n                transform: scale(0.5) rotate(180deg);\n                opacity: 0.8;\n            }\n            100% {\n                transform: scale(1) rotate(360deg);\n                opacity: 0;\n            }\n        }\n    `;\n    document.head.appendChild(rippleStyle);\n    \n    // Holographic Glitch Effect\n    function addGlitchEffect(element) {\n        if (!element) return;\n        \n        const originalText = element.textContent;\n        const glitchChars = '!@#$%^&*()_+-=[]{}|;:,.<>?~`';\n        let glitchInterval;\n        \n        element.addEventListener('mouseenter', () => {\n            let iterations = 0;\n            \n            glitchInterval = setInterval(() => {\n                element.textContent = originalText\n                    .split('')\n                    .map((char, index) => {\n                        if (index < iterations) {\n                            return originalText[index];\n                        }\n                        return glitchChars[Math.floor(Math.random() * glitchChars.length)];\n                    })\n                    .join('');\n                \n                if (iterations >= originalText.length) {\n                    clearInterval(glitchInterval);\n                    element.textContent = originalText;\n                }\n                \n                iterations += 1/2;\n            }, 50);\n        });\n        \n        element.addEventListener('mouseleave', () => {\n            clearInterval(glitchInterval);\n            element.textContent = originalText;\n        });\n    }\n    \n    // 3D Scroll Parallax\n    function initScrollParallax() {\n        window.addEventListener('scroll', () => {\n            const scrolled = window.pageYOffset;\n            const rate = scrolled * -0.5;\n            \n            // Parallax for different elements\n            const parallaxElements = document.querySelectorAll('.highlight-item, .project-card, .skill-category');\n            \n            parallaxElements.forEach((element, index) => {\n                const speed = 0.3 + (index * 0.1);\n                const yPos = scrolled * speed;\n                const rotateY = scrolled * 0.02;\n                \n                element.style.transform += ` translateY(${yPos * 0.1}px) rotateY(${rotateY}deg)`;\n            });\n            \n            // Background parallax\n            document.body.style.backgroundPosition = `center ${rate}px`;\n        });\n    }\n    \n    // Dynamic Color Shifting\n    function initDynamicColors() {\n        let hue = 0;\n        \n        setInterval(() => {\n            hue += 0.5;\n            if (hue >= 360) hue = 0;\n            \n            document.documentElement.style.setProperty('--dynamic-hue', hue + 'deg');\n            \n            // Update particle colors dynamically\n            const particles = document.querySelectorAll('.particle');\n            particles.forEach((particle, index) => {\n                const particleHue = (hue + index * 10) % 360;\n                particle.style.filter = `hue-rotate(${particleHue}deg)`;\n            });\n        }, 100);\n    }\n    \n    // Holographic Profile Image Effect\n    function initProfileEffects() {\n        const profileImage = document.querySelector('.profile-pic');\n        if (!profileImage) return;\n        \n        profileImage.addEventListener('mousemove', (e) => {\n            const rect = profileImage.getBoundingClientRect();\n            const x = ((e.clientX - rect.left) / rect.width) * 100;\n            const y = ((e.clientY - rect.top) / rect.height) * 100;\n            \n            profileImage.style.filter = `\n                brightness(${1 + y * 0.01}) \n                contrast(${1 + x * 0.01}) \n                hue-rotate(${x * 3.6}deg)\n                saturate(${100 + y * 2}%)\n                drop-shadow(0 0 20px rgba(0, 180, 219, ${0.5 + y * 0.01}))\n            `;\n            \n            // Add holographic shimmer\n            profileImage.style.background = `\n                linear-gradient(${x}deg, \n                rgba(0, 180, 219, 0.3) 0%, \n                rgba(255, 255, 255, 0.1) 50%, \n                rgba(0, 180, 219, 0.3) 100%)\n            `;\n        });\n        \n        profileImage.addEventListener('mouseleave', () => {\n            profileImage.style.filter = 'brightness(1) contrast(1) hue-rotate(0deg) saturate(100%)';\n            profileImage.style.background = 'none';\n        });\n    }\n    \n    // Mobile Navigation Toggle\n    function initMobileNav() {\n        const mobileMenu = document.getElementById('mobile-menu');\n        const navMenu = document.getElementById('nav-menu');\n        \n        if (mobileMenu && navMenu) {\n            mobileMenu.addEventListener('click', () => {\n                navMenu.classList.toggle('active');\n                mobileMenu.classList.toggle('active');\n            });\n        }\n    }\n    \n    // Intersection Observer for Animations\n    function initScrollAnimations() {\n        const observerOptions = {\n            threshold: 0.1,\n            rootMargin: '0px 0px -50px 0px'\n        };\n        \n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    entry.target.style.animation = 'slideInUp 1s ease-out forwards';\n                    entry.target.style.opacity = '1';\n                }\n            });\n        }, observerOptions);\n        \n        // Observe all sections\n        const sections = document.querySelectorAll('section');\n        sections.forEach(section => {\n            section.style.opacity = '0';\n            observer.observe(section);\n        });\n    }\n    \n    // Typing Effect for Hero Title\n    function initTypingEffect() {\n        const heroTitle = document.querySelector('.gradient-text');\n        if (!heroTitle) return;\n        \n        const text = heroTitle.textContent;\n        heroTitle.textContent = '';\n        \n        let i = 0;\n        const typeInterval = setInterval(() => {\n            heroTitle.textContent += text.charAt(i);\n            i++;\n            \n            if (i >= text.length) {\n                clearInterval(typeInterval);\n            }\n        }, 100);\n    }\n    \n    // Smooth Scrolling for Navigation Links\n    function initSmoothScrolling() {\n        const navLinks = document.querySelectorAll('.nav-link');\n        \n        navLinks.forEach(link => {\n            link.addEventListener('click', (e) => {\n                e.preventDefault();\n                \n                const targetId = link.getAttribute('href');\n                const targetSection = document.querySelector(targetId);\n                \n                if (targetSection) {\n                    targetSection.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'start'\n                    });\n                }\n            });\n        });\n    }\n    \n    // Initialize all effects\n    createFloatingParticles();\n    add3DTiltEffect('.highlight-item, .project-card, .skill-category, .event-item, .gallery-item');\n    addQuantumRipple('.btn, .skill-tag, .contact-link');\n    \n    // Add glitch effect to title\n    const heroTitle = document.querySelector('.gradient-text');\n    if (heroTitle) {\n        addGlitchEffect(heroTitle);\n    }\n    \n    initScrollParallax();\n    initDynamicColors();\n    initProfileEffects();\n    initMobileNav();\n    initScrollAnimations();\n    initTypingEffect();\n    initSmoothScrolling();\n    \n    // Performance optimization for mobile\n    const isMobile = window.innerWidth <= 768;\n    if (isMobile) {\n        // Reduce particle count on mobile\n        const particles = document.querySelectorAll('.particle');\n        particles.forEach((particle, index) => {\n            if (index > 20) particle.remove();\n        });\n    }\n    \n    // Add loading animation\n    window.addEventListener('load', () => {\n        document.body.style.opacity = '0';\n        document.body.style.transition = 'opacity 1s ease-in-out';\n        \n        setTimeout(() => {\n            document.body.style.opacity = '1';\n        }, 100);\n    });\n    \n    console.log('🚀 3D Futuristic Portfolio Loaded Successfully!');\n});